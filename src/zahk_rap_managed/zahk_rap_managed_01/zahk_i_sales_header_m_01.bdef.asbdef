managed;
with draft;
//strict ( 2 );

define behavior for ZAHK_I_SALES_HEADER_M_01 alias SalesHead_M_01
implementation in class zbp_ahk_i_sales_header_m_01 unique
persistent table ztest_vbak_01
draft table ztest_vbak_01_dr
with additional save
//lock master
lock master total etag last_changed_on // -> in order to identify changes to active instances,
                                       // in cases where the durable lock has expired,
                                       // a total ETag field is required.
//authorization master ( instance )
etag master last_changed_on
late numbering
{
  field ( readonly : update ) sales_doc_num;

  create;
  update ( features : instance );
  delete ( features : instance );
  association _SItem_M_01 { create ( features : instance ); with draft; }

  // to block sales order
  action blockOrder result [1] $self ; // result[1] -> 1 row
  action unblockOrder result [1] $self;

  draft action Activate optimized;
  draft action Discard;
  draft action Edit;
  draft action Resume;
  draft determine action Prepare;

  // EVENT -> when a sales doc is blocked, it will be logged in table ' zahk_blocked_sal '
  event LogBlockedSalesDoc parameter zahk_s_block_eventdata;

  mapping for ztest_vbak_01 control zahk_i_sales_header_m_01 corresponding
    {
      sales_doc_num   = vbeln;
      block_status    = faksk;
      sales_dist      = vtweg;
      sales_div       = spart;
      sales_org       = vkorg;
      total_cost      = netwr;
      cost_currency   = waerk;
      person_created  = ernam;
      date_created    = erdat;

      // -> normally you should also map these 3 fields as well but currently it raises an error :
      // Component "attachment/filename/mimetype" has a type that is not supported for "control"
      // -> works like this but note that naming in this case should be same in table and all entities.
//      attachment      = attachment;
//      filename        = filename;
//      mimetype        = mimetype;

      last_changed_on = last_changed_timestamp;
    }

}

define behavior for ZAHK_I_SALES_ITEM_M_01 alias SalesItem_M_01
implementation in class zbp_ahk_i_sales_item_m_01 unique
//persistent table ztest_vbap_01 -> for unmanaged save this should be commented out, both not possible
draft table ztest_vbap_01_dr
lock dependent by _SHeader_M_01
with unmanaged save
//authorization dependent by _SHeader_M_01
etag master last_changed_on
late numbering
{
  // for external numbering, meaning to take it from user
  // put here as I want to demonstrate the creation of an item
  field ( mandatory : create ) item_position;
  // sales_doc_num, -> As I will take the current sales document head. number from UPDATE-salesItem, User doesnt&shouldnt need to provide any header number
  // check method -> save_modified -> create-salesitem_m_01

  field ( readonly ) sales_doc_num, unit, total_item_cost
  //   item_position -> commented out as for this scenario I want to provide the position no on UI
  ;

  update;
  delete;
  association _SHeader_M_01 { with draft; }

  // quantity
  // unit cost -> all price changes on item level will reflect the total price on header level
  determination newPriceTotal on modify { field quantity, unit_cost; }
  // validation of given quantity and unit cost are not negative
  validation checkNegativityPriceQty on save { field quantity, unit_cost; }

  // getting error: "ZAHK_I_SALES_ITEM_M_01" is not a lock entity ("lock master") and hence cannot define a "PREPARE" action.
  // -> lock master cannot be added, as it says it is currenly only possible in root entities.
  // -> normally always use this draft determine action including all your validations.

//  draft determine action Prepare {
//    validation checkNegativityPriceQty;
//  }

  mapping for ztest_vbap_01 control zahk_i_sales_item_m_01 corresponding
    {
      sales_doc_num   = vbeln;
      item_position   = posnr;
      cost_currency   = waerk;
      mat_desc        = arktx;
      mat_num         = matnr;
      quantity        = kpein;
      total_item_cost = netwr;
      unit_cost       = netpr;
      unit            = kmein;
      last_changed_on = last_changed_timestamp;
    }
}